{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Coverage Space ...a place to track your code coverage metrics. The Coverage Space is a RESTful API to track code coverage metrics collected when running unit and integration tests. Features The service lets you upload coverage metrics and alerts you when they decrease. The following metrics are supported: unit test coverage integration test coverage overall (combined) test coverage Usage Check out the API or install the command-line client . Support Help support this project through GitHub Sponsors .","title":"Home"},{"location":"#the-coverage-space","text":"...a place to track your code coverage metrics. The Coverage Space is a RESTful API to track code coverage metrics collected when running unit and integration tests.","title":"The Coverage Space"},{"location":"#features","text":"The service lets you upload coverage metrics and alerts you when they decrease. The following metrics are supported: unit test coverage integration test coverage overall (combined) test coverage","title":"Features"},{"location":"#usage","text":"Check out the API or install the command-line client .","title":"Usage"},{"location":"#support","text":"Help support this project through GitHub Sponsors .","title":"Support"},{"location":"api/","text":"RESTful API The API is available at https://api.coverage.space . When viewed in a browser, an HTML interface is displayed. For an example, check out https://api.coverage.space/my_owner/my_repo . The API is also accessible from the command-line. The following examples will use HTTPie for simplicity, but the same could be accomplished with curl . To install the HTTP client: $ pip install HTTPie Getting Metrics To get the latest coverage metrics: $ http GET api.coverage.space/my_owner/my_repo or specify a particular branch: $ http GET api.coverage.space/my_owner/my_repo/my_branch Updating Metrics To update coverage metrics: $ http PUT api.coverage.space/my_owner/my_repo unit=90 --check-status or specify a particular branch: $ http PUT api.coverage.space/my_owner/my_repo/my_branch unit=90 --check-status Reseting Metrics To reset the coverage metrics: $ http DELETE api.coverage.space/my_owner/my_repo or specify a particular branch: $ http DELETE api.coverage.space/my_owner/my_repo/my_branch","title":"API"},{"location":"api/#restful-api","text":"The API is available at https://api.coverage.space . When viewed in a browser, an HTML interface is displayed. For an example, check out https://api.coverage.space/my_owner/my_repo . The API is also accessible from the command-line. The following examples will use HTTPie for simplicity, but the same could be accomplished with curl . To install the HTTP client: $ pip install HTTPie","title":"RESTful API"},{"location":"api/#getting-metrics","text":"To get the latest coverage metrics: $ http GET api.coverage.space/my_owner/my_repo or specify a particular branch: $ http GET api.coverage.space/my_owner/my_repo/my_branch","title":"Getting Metrics"},{"location":"api/#updating-metrics","text":"To update coverage metrics: $ http PUT api.coverage.space/my_owner/my_repo unit=90 --check-status or specify a particular branch: $ http PUT api.coverage.space/my_owner/my_repo/my_branch unit=90 --check-status","title":"Updating Metrics"},{"location":"api/#reseting-metrics","text":"To reset the coverage metrics: $ http DELETE api.coverage.space/my_owner/my_repo or specify a particular branch: $ http DELETE api.coverage.space/my_owner/my_repo/my_branch","title":"Reseting Metrics"},{"location":"client/","text":"Command-line Client To automate the process of updating coverage metrics, the official command-line client can be used to interact with the API: $ pip install --upgrade coveragespace Updating Metrics To update coverage metrics: $ coveragespace set <metric> Additional Reading For additional options and supported coverage formats, see the full documentation .","title":"Client"},{"location":"client/#command-line-client","text":"To automate the process of updating coverage metrics, the official command-line client can be used to interact with the API: $ pip install --upgrade coveragespace","title":"Command-line Client"},{"location":"client/#updating-metrics","text":"To update coverage metrics: $ coveragespace set <metric>","title":"Updating Metrics"},{"location":"client/#additional-reading","text":"For additional options and supported coverage formats, see the full documentation .","title":"Additional Reading"},{"location":"about/changelog/","text":"Revision History 1.1 (2017/01/30) Return 202 when resetting metrics. 1.0 (2016/09/30) Initial stable release. 0.3 (2016/04/17) Allow variation in metrics less than 0.1 percentage points. 0.2 (2016/04/16) Return 400 when no coverage metrics are provided. 0.1 (2016/02/06) Initial release.","title":"Release Notes"},{"location":"about/changelog/#revision-history","text":"","title":"Revision History"},{"location":"about/changelog/#11-20170130","text":"Return 202 when resetting metrics.","title":"1.1 (2017/01/30)"},{"location":"about/changelog/#10-20160930","text":"Initial stable release.","title":"1.0 (2016/09/30)"},{"location":"about/changelog/#03-20160417","text":"Allow variation in metrics less than 0.1 percentage points.","title":"0.3 (2016/04/17)"},{"location":"about/changelog/#02-20160416","text":"Return 400 when no coverage metrics are provided.","title":"0.2 (2016/04/16)"},{"location":"about/changelog/#01-20160206","text":"Initial release.","title":"0.1 (2016/02/06)"},{"location":"about/contributing/","text":"For Contributors Setup Requirements Make: Windows: http://mingw.org/download/installer Mac: http://developer.apple.com/xcode Linux: http://www.gnu.org/software/make pipenv: http://docs.pipenv.org To confirm these system dependencies are configured correctly: $ make doctor Installation Install project dependencies into a virtual environment: $ make install Development Tasks Testing Manually run the tests: $ make test or keep them running on change: $ make watch In order to have OS X notifications, brew install terminal-notifier . Static Analysis Run linters and static analyzers: $ make pylint $ make pycodestyle $ make pydocstyle $ make check # includes all checks Continuous Integration The CI server will report overall build status: $ make ci","title":"Contributing"},{"location":"about/contributing/#for-contributors","text":"","title":"For Contributors"},{"location":"about/contributing/#setup","text":"","title":"Setup"},{"location":"about/contributing/#requirements","text":"Make: Windows: http://mingw.org/download/installer Mac: http://developer.apple.com/xcode Linux: http://www.gnu.org/software/make pipenv: http://docs.pipenv.org To confirm these system dependencies are configured correctly: $ make doctor","title":"Requirements"},{"location":"about/contributing/#installation","text":"Install project dependencies into a virtual environment: $ make install","title":"Installation"},{"location":"about/contributing/#development-tasks","text":"","title":"Development Tasks"},{"location":"about/contributing/#testing","text":"Manually run the tests: $ make test or keep them running on change: $ make watch In order to have OS X notifications, brew install terminal-notifier .","title":"Testing"},{"location":"about/contributing/#static-analysis","text":"Run linters and static analyzers: $ make pylint $ make pycodestyle $ make pydocstyle $ make check # includes all checks","title":"Static Analysis"},{"location":"about/contributing/#continuous-integration","text":"The CI server will report overall build status: $ make ci","title":"Continuous Integration"},{"location":"about/license/","text":"License The MIT License (MIT) Copyright \u00a9 2016, Jace Browning Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"The MIT License (MIT) Copyright \u00a9 2016, Jace Browning Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}